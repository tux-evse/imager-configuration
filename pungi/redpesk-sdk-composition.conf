release_name = 'Redpesk SDK'
release_short = 'SDK'
release_version = 'arz'

comps_file = {
    'scm': 'git',
    'repo': 'http://git.ovh.iot/redpesk/imager-configuration.git',
    'branch': 'master',
    'file': 'comps/comps-rpd-arz.xml',
    # Merge translations by running make. This command will generate the file.
    # 'command': 'make comps-rawhide.xml'
}
variants_file='variants-redpesk-devel.xml'

# Put packages into subdirectories hashed by their initial letter.
hashed_directories = False

# RUNROOT settings
runroot_channel = 'compose'
runroot_tag = 'redpesk-devel-arz-build'

# PKGSET
# Will use sigkeys once we will sign our packages.
sigkeys = ['', '49fd77499570ff31']
pkgset_source = 'repos'
pkgset_repos = {'x86_64': [repo]}

# GATHER
filter_system_release_packages = False
gather_method = {
    '^Everything$': {                # For all variants
        'comps': 'deps',    # resolve dependencies for packages from comps file
        'module': 'nodeps', # but not for packages from modules
    },
    '^(AGL|Server)$': {                # For all variants
        'comps': 'nodeps',    # resolve dependencies for packages from comps file
        'module': 'nodeps', # but not for packages from modules
    },
}
gather_backend = 'dnf'
gather_profiler = False
check_deps = False
greedy_method = 'build'

repoclosure_backend = 'dnf'

# CREATEREPO
createrepo_deltas = False
createrepo_database = True
createrepo_use_xz = True
createrepo_extra_args = ['--zck', '--zck-dict-dir=/usr/share/fedora-repo-zdicts/rawhide']

additional_packages = [
    ('^(Server|AGL|Everything)$', {
        '*': [
            # Add all architectures of dracut package.
            'dracut.*',
            # All all packages matching this pattern
            'autocorr-*',
        ],
    }),

    ('^Everything$', {
        # Everything should include all packages from the tag. This only
        # applies to the native arch. Multilib will still be pulled in
        # according to multilib rules.
        '*': ['*'],
    }),
]

failable_deliverables = [
    # Installer and ISOs for server failing do not abort the compose.
    ('^Server$', {
        '*': ['buildinstall', 'iso'],
    }),
    ('^.*$', {
        # Buildinstall is not blocking
        '*': ['iso'],
        'src': ['buildinstall', 'iso'],
        # Nothing on i386, ppc64le blocks the compose
        'i386': ['buildinstall', 'iso'],
        'ppc64le': ['buildinstall', 'iso'],
        's390x': ['buildinstall', 'iso'],
    })
]

### CREATEISO

createiso_skip = [
    ('^.*$', {
        '*': True,
        'src': True
    }),
]
create_jigdo = False
